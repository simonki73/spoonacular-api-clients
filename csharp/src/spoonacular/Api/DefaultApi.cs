/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using spoonacular.Client;
using spoonacular.Model;

namespace spoonacular.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Analyze Recipe
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to send raw recipe information, such as title, servings, and ingredients, to then see what we compute (badges, diets, nutrition, and more). This is useful if you have your own recipe data and want to enrich it with our semantic analysis.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyzeRecipeRequest">Example request body.</param>
        /// <param name="language">The input language, either \&quot;en\&quot; or \&quot;de\&quot;. (optional)</param>
        /// <param name="includeNutrition">Whether nutrition data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AnalyzeRecipe(AnalyzeRecipeRequest analyzeRecipeRequest, string? language = default(string?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Analyze Recipe
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to send raw recipe information, such as title, servings, and ingredients, to then see what we compute (badges, diets, nutrition, and more). This is useful if you have your own recipe data and want to enrich it with our semantic analysis.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyzeRecipeRequest">Example request body.</param>
        /// <param name="language">The input language, either \&quot;en\&quot; or \&quot;de\&quot;. (optional)</param>
        /// <param name="includeNutrition">Whether nutrition data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyzeRecipeWithHttpInfo(AnalyzeRecipeRequest analyzeRecipeRequest, string? language = default(string?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Create Recipe Card
        /// </summary>
        /// <remarks>
        /// Generate a recipe card for a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="mask">The mask to put over the recipe image (\&quot;ellipseMask\&quot;, \&quot;diamondMask\&quot;, \&quot;starMask\&quot;, \&quot;heartMask\&quot;, \&quot;potMask\&quot;, \&quot;fishMask\&quot;). (optional)</param>
        /// <param name="backgroundImage">The background image (\&quot;none\&quot;,\&quot;background1\&quot;, or \&quot;background2\&quot;). (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CreateRecipeCardGet(int id, string? mask = default(string?), string? backgroundImage = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create Recipe Card
        /// </summary>
        /// <remarks>
        /// Generate a recipe card for a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="mask">The mask to put over the recipe image (\&quot;ellipseMask\&quot;, \&quot;diamondMask\&quot;, \&quot;starMask\&quot;, \&quot;heartMask\&quot;, \&quot;potMask\&quot;, \&quot;fishMask\&quot;). (optional)</param>
        /// <param name="backgroundImage">The background image (\&quot;none\&quot;,\&quot;background1\&quot;, or \&quot;background2\&quot;). (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateRecipeCardGetWithHttpInfo(int id, string? mask = default(string?), string? backgroundImage = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), int operationIndex = 0);

        /// <summary>
        /// Search Restaurants
        /// </summary>
        /// <remarks>
        /// Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="lat">The latitude of the user&#39;s location. (optional)</param>
        /// <param name="lng">The longitude of the user&#39;s location.\&quot;. (optional)</param>
        /// <param name="distance">The distance around the location in miles. (optional)</param>
        /// <param name="budget">The user&#39;s budget for a meal in USD. (optional)</param>
        /// <param name="cuisine">The cuisine of the restaurant. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurant between 0 and 5. (optional)</param>
        /// <param name="isOpen">Whether the restaurant must be open at the time of search. (optional)</param>
        /// <param name="sort">How to sort the results, one of the following &#39;cheapest&#39;, &#39;fastest&#39;, &#39;rating&#39;, &#39;distance&#39; or the default &#39;relevance&#39;. (optional)</param>
        /// <param name="page">The page number of results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchRestaurants200Response</returns>
        SearchRestaurants200Response SearchRestaurants(string? query = default(string?), decimal? lat = default(decimal?), decimal? lng = default(decimal?), decimal? distance = default(decimal?), decimal? budget = default(decimal?), string? cuisine = default(string?), decimal? minRating = default(decimal?), bool? isOpen = default(bool?), string? sort = default(string?), decimal? page = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Search Restaurants
        /// </summary>
        /// <remarks>
        /// Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="lat">The latitude of the user&#39;s location. (optional)</param>
        /// <param name="lng">The longitude of the user&#39;s location.\&quot;. (optional)</param>
        /// <param name="distance">The distance around the location in miles. (optional)</param>
        /// <param name="budget">The user&#39;s budget for a meal in USD. (optional)</param>
        /// <param name="cuisine">The cuisine of the restaurant. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurant between 0 and 5. (optional)</param>
        /// <param name="isOpen">Whether the restaurant must be open at the time of search. (optional)</param>
        /// <param name="sort">How to sort the results, one of the following &#39;cheapest&#39;, &#39;fastest&#39;, &#39;rating&#39;, &#39;distance&#39; or the default &#39;relevance&#39;. (optional)</param>
        /// <param name="page">The page number of results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchRestaurants200Response</returns>
        ApiResponse<SearchRestaurants200Response> SearchRestaurantsWithHttpInfo(string? query = default(string?), decimal? lat = default(decimal?), decimal? lng = default(decimal?), decimal? distance = default(decimal?), decimal? budget = default(decimal?), string? cuisine = default(string?), decimal? minRating = default(decimal?), bool? isOpen = default(bool?), string? sort = default(string?), decimal? page = default(decimal?), int operationIndex = 0);

        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        /// Analyze Recipe
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to send raw recipe information, such as title, servings, and ingredients, to then see what we compute (badges, diets, nutrition, and more). This is useful if you have your own recipe data and want to enrich it with our semantic analysis.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyzeRecipeRequest">Example request body.</param>
        /// <param name="language">The input language, either \&quot;en\&quot; or \&quot;de\&quot;. (optional)</param>
        /// <param name="includeNutrition">Whether nutrition data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyzeRecipeAsync(AnalyzeRecipeRequest analyzeRecipeRequest, string? language = default(string?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Analyze Recipe
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to send raw recipe information, such as title, servings, and ingredients, to then see what we compute (badges, diets, nutrition, and more). This is useful if you have your own recipe data and want to enrich it with our semantic analysis.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyzeRecipeRequest">Example request body.</param>
        /// <param name="language">The input language, either \&quot;en\&quot; or \&quot;de\&quot;. (optional)</param>
        /// <param name="includeNutrition">Whether nutrition data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyzeRecipeWithHttpInfoAsync(AnalyzeRecipeRequest analyzeRecipeRequest, string? language = default(string?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Recipe Card
        /// </summary>
        /// <remarks>
        /// Generate a recipe card for a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="mask">The mask to put over the recipe image (\&quot;ellipseMask\&quot;, \&quot;diamondMask\&quot;, \&quot;starMask\&quot;, \&quot;heartMask\&quot;, \&quot;potMask\&quot;, \&quot;fishMask\&quot;). (optional)</param>
        /// <param name="backgroundImage">The background image (\&quot;none\&quot;,\&quot;background1\&quot;, or \&quot;background2\&quot;). (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateRecipeCardGetAsync(int id, string? mask = default(string?), string? backgroundImage = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Recipe Card
        /// </summary>
        /// <remarks>
        /// Generate a recipe card for a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="mask">The mask to put over the recipe image (\&quot;ellipseMask\&quot;, \&quot;diamondMask\&quot;, \&quot;starMask\&quot;, \&quot;heartMask\&quot;, \&quot;potMask\&quot;, \&quot;fishMask\&quot;). (optional)</param>
        /// <param name="backgroundImage">The background image (\&quot;none\&quot;,\&quot;background1\&quot;, or \&quot;background2\&quot;). (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRecipeCardGetWithHttpInfoAsync(int id, string? mask = default(string?), string? backgroundImage = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Restaurants
        /// </summary>
        /// <remarks>
        /// Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="lat">The latitude of the user&#39;s location. (optional)</param>
        /// <param name="lng">The longitude of the user&#39;s location.\&quot;. (optional)</param>
        /// <param name="distance">The distance around the location in miles. (optional)</param>
        /// <param name="budget">The user&#39;s budget for a meal in USD. (optional)</param>
        /// <param name="cuisine">The cuisine of the restaurant. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurant between 0 and 5. (optional)</param>
        /// <param name="isOpen">Whether the restaurant must be open at the time of search. (optional)</param>
        /// <param name="sort">How to sort the results, one of the following &#39;cheapest&#39;, &#39;fastest&#39;, &#39;rating&#39;, &#39;distance&#39; or the default &#39;relevance&#39;. (optional)</param>
        /// <param name="page">The page number of results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchRestaurants200Response</returns>
        System.Threading.Tasks.Task<SearchRestaurants200Response> SearchRestaurantsAsync(string? query = default(string?), decimal? lat = default(decimal?), decimal? lng = default(decimal?), decimal? distance = default(decimal?), decimal? budget = default(decimal?), string? cuisine = default(string?), decimal? minRating = default(decimal?), bool? isOpen = default(bool?), string? sort = default(string?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Restaurants
        /// </summary>
        /// <remarks>
        /// Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="lat">The latitude of the user&#39;s location. (optional)</param>
        /// <param name="lng">The longitude of the user&#39;s location.\&quot;. (optional)</param>
        /// <param name="distance">The distance around the location in miles. (optional)</param>
        /// <param name="budget">The user&#39;s budget for a meal in USD. (optional)</param>
        /// <param name="cuisine">The cuisine of the restaurant. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurant between 0 and 5. (optional)</param>
        /// <param name="isOpen">Whether the restaurant must be open at the time of search. (optional)</param>
        /// <param name="sort">How to sort the results, one of the following &#39;cheapest&#39;, &#39;fastest&#39;, &#39;rating&#39;, &#39;distance&#39; or the default &#39;relevance&#39;. (optional)</param>
        /// <param name="page">The page number of results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchRestaurants200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchRestaurants200Response>> SearchRestaurantsWithHttpInfoAsync(string? query = default(string?), decimal? lat = default(decimal?), decimal? lng = default(decimal?), decimal? distance = default(decimal?), decimal? budget = default(decimal?), string? cuisine = default(string?), decimal? minRating = default(decimal?), bool? isOpen = default(bool?), string? sort = default(string?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private spoonacular.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                new spoonacular.Client.Configuration { BasePath = basePath }
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(spoonacular.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(spoonacular.Client.ISynchronousClient client, spoonacular.Client.IAsynchronousClient asyncClient, spoonacular.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public spoonacular.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public spoonacular.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public spoonacular.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public spoonacular.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Analyze Recipe This endpoint allows you to send raw recipe information, such as title, servings, and ingredients, to then see what we compute (badges, diets, nutrition, and more). This is useful if you have your own recipe data and want to enrich it with our semantic analysis.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyzeRecipeRequest">Example request body.</param>
        /// <param name="language">The input language, either \&quot;en\&quot; or \&quot;de\&quot;. (optional)</param>
        /// <param name="includeNutrition">Whether nutrition data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AnalyzeRecipe(AnalyzeRecipeRequest analyzeRecipeRequest, string? language = default(string?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = AnalyzeRecipeWithHttpInfo(analyzeRecipeRequest, language, includeNutrition, includeTaste);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze Recipe This endpoint allows you to send raw recipe information, such as title, servings, and ingredients, to then see what we compute (badges, diets, nutrition, and more). This is useful if you have your own recipe data and want to enrich it with our semantic analysis.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyzeRecipeRequest">Example request body.</param>
        /// <param name="language">The input language, either \&quot;en\&quot; or \&quot;de\&quot;. (optional)</param>
        /// <param name="includeNutrition">Whether nutrition data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public spoonacular.Client.ApiResponse<Object> AnalyzeRecipeWithHttpInfo(AnalyzeRecipeRequest analyzeRecipeRequest, string? language = default(string?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'analyzeRecipeRequest' is set
            if (analyzeRecipeRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'analyzeRecipeRequest' when calling DefaultApi->AnalyzeRecipe");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = [
                "application/json"
            ];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }
            if (includeTaste != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "includeTaste", includeTaste));
            }
            localVarRequestOptions.Data = analyzeRecipeRequest;

            localVarRequestOptions.Operation = "DefaultApi.AnalyzeRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Post<Object>("/recipes/analyze", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyzeRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Analyze Recipe This endpoint allows you to send raw recipe information, such as title, servings, and ingredients, to then see what we compute (badges, diets, nutrition, and more). This is useful if you have your own recipe data and want to enrich it with our semantic analysis.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyzeRecipeRequest">Example request body.</param>
        /// <param name="language">The input language, either \&quot;en\&quot; or \&quot;de\&quot;. (optional)</param>
        /// <param name="includeNutrition">Whether nutrition data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyzeRecipeAsync(AnalyzeRecipeRequest analyzeRecipeRequest, string? language = default(string?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = await AnalyzeRecipeWithHttpInfoAsync(analyzeRecipeRequest, language, includeNutrition, includeTaste, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze Recipe This endpoint allows you to send raw recipe information, such as title, servings, and ingredients, to then see what we compute (badges, diets, nutrition, and more). This is useful if you have your own recipe data and want to enrich it with our semantic analysis.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="analyzeRecipeRequest">Example request body.</param>
        /// <param name="language">The input language, either \&quot;en\&quot; or \&quot;de\&quot;. (optional)</param>
        /// <param name="includeNutrition">Whether nutrition data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<Object>> AnalyzeRecipeWithHttpInfoAsync(AnalyzeRecipeRequest analyzeRecipeRequest, string? language = default(string?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'analyzeRecipeRequest' is set
            if (analyzeRecipeRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'analyzeRecipeRequest' when calling DefaultApi->AnalyzeRecipe");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }
            if (includeTaste != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeTaste", includeTaste));
            }
            localVarRequestOptions.Data = analyzeRecipeRequest;

            localVarRequestOptions.Operation = "DefaultApi.AnalyzeRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/recipes/analyze", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyzeRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Recipe Card Generate a recipe card for a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="mask">The mask to put over the recipe image (\&quot;ellipseMask\&quot;, \&quot;diamondMask\&quot;, \&quot;starMask\&quot;, \&quot;heartMask\&quot;, \&quot;potMask\&quot;, \&quot;fishMask\&quot;). (optional)</param>
        /// <param name="backgroundImage">The background image (\&quot;none\&quot;,\&quot;background1\&quot;, or \&quot;background2\&quot;). (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CreateRecipeCardGet(int id, string? mask = default(string?), string? backgroundImage = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = CreateRecipeCardGetWithHttpInfo(id, mask, backgroundImage, backgroundColor, fontColor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Recipe Card Generate a recipe card for a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="mask">The mask to put over the recipe image (\&quot;ellipseMask\&quot;, \&quot;diamondMask\&quot;, \&quot;starMask\&quot;, \&quot;heartMask\&quot;, \&quot;potMask\&quot;, \&quot;fishMask\&quot;). (optional)</param>
        /// <param name="backgroundImage">The background image (\&quot;none\&quot;,\&quot;background1\&quot;, or \&quot;background2\&quot;). (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public spoonacular.Client.ApiResponse<Object> CreateRecipeCardGetWithHttpInfo(int id, string? mask = default(string?), string? backgroundImage = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (mask != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "mask", mask));
            }
            if (backgroundImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "backgroundImage", backgroundImage));
            }
            if (backgroundColor != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "backgroundColor", backgroundColor));
            }
            if (fontColor != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "fontColor", fontColor));
            }

            localVarRequestOptions.Operation = "DefaultApi.CreateRecipeCardGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/recipes/{id}/card", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecipeCardGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Recipe Card Generate a recipe card for a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="mask">The mask to put over the recipe image (\&quot;ellipseMask\&quot;, \&quot;diamondMask\&quot;, \&quot;starMask\&quot;, \&quot;heartMask\&quot;, \&quot;potMask\&quot;, \&quot;fishMask\&quot;). (optional)</param>
        /// <param name="backgroundImage">The background image (\&quot;none\&quot;,\&quot;background1\&quot;, or \&quot;background2\&quot;). (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateRecipeCardGetAsync(int id, string? mask = default(string?), string? backgroundImage = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = await CreateRecipeCardGetWithHttpInfoAsync(id, mask, backgroundImage, backgroundColor, fontColor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Recipe Card Generate a recipe card for a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="mask">The mask to put over the recipe image (\&quot;ellipseMask\&quot;, \&quot;diamondMask\&quot;, \&quot;starMask\&quot;, \&quot;heartMask\&quot;, \&quot;potMask\&quot;, \&quot;fishMask\&quot;). (optional)</param>
        /// <param name="backgroundImage">The background image (\&quot;none\&quot;,\&quot;background1\&quot;, or \&quot;background2\&quot;). (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<Object>> CreateRecipeCardGetWithHttpInfoAsync(int id, string? mask = default(string?), string? backgroundImage = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (mask != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "mask", mask));
            }
            if (backgroundImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "backgroundImage", backgroundImage));
            }
            if (backgroundColor != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "backgroundColor", backgroundColor));
            }
            if (fontColor != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "fontColor", fontColor));
            }

            localVarRequestOptions.Operation = "DefaultApi.CreateRecipeCardGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/recipes/{id}/card", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecipeCardGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Restaurants Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="lat">The latitude of the user&#39;s location. (optional)</param>
        /// <param name="lng">The longitude of the user&#39;s location.\&quot;. (optional)</param>
        /// <param name="distance">The distance around the location in miles. (optional)</param>
        /// <param name="budget">The user&#39;s budget for a meal in USD. (optional)</param>
        /// <param name="cuisine">The cuisine of the restaurant. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurant between 0 and 5. (optional)</param>
        /// <param name="isOpen">Whether the restaurant must be open at the time of search. (optional)</param>
        /// <param name="sort">How to sort the results, one of the following &#39;cheapest&#39;, &#39;fastest&#39;, &#39;rating&#39;, &#39;distance&#39; or the default &#39;relevance&#39;. (optional)</param>
        /// <param name="page">The page number of results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchRestaurants200Response</returns>
        public SearchRestaurants200Response SearchRestaurants(string? query = default(string?), decimal? lat = default(decimal?), decimal? lng = default(decimal?), decimal? distance = default(decimal?), decimal? budget = default(decimal?), string? cuisine = default(string?), decimal? minRating = default(decimal?), bool? isOpen = default(bool?), string? sort = default(string?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<SearchRestaurants200Response> localVarResponse = SearchRestaurantsWithHttpInfo(query, lat, lng, distance, budget, cuisine, minRating, isOpen, sort, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Restaurants Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="lat">The latitude of the user&#39;s location. (optional)</param>
        /// <param name="lng">The longitude of the user&#39;s location.\&quot;. (optional)</param>
        /// <param name="distance">The distance around the location in miles. (optional)</param>
        /// <param name="budget">The user&#39;s budget for a meal in USD. (optional)</param>
        /// <param name="cuisine">The cuisine of the restaurant. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurant between 0 and 5. (optional)</param>
        /// <param name="isOpen">Whether the restaurant must be open at the time of search. (optional)</param>
        /// <param name="sort">How to sort the results, one of the following &#39;cheapest&#39;, &#39;fastest&#39;, &#39;rating&#39;, &#39;distance&#39; or the default &#39;relevance&#39;. (optional)</param>
        /// <param name="page">The page number of results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchRestaurants200Response</returns>
        public spoonacular.Client.ApiResponse<SearchRestaurants200Response> SearchRestaurantsWithHttpInfo(string? query = default(string?), decimal? lat = default(decimal?), decimal? lng = default(decimal?), decimal? distance = default(decimal?), decimal? budget = default(decimal?), string? cuisine = default(string?), decimal? minRating = default(decimal?), bool? isOpen = default(bool?), string? sort = default(string?), decimal? page = default(decimal?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (lat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            }
            if (lng != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "lng", lng));
            }
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (budget != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "budget", budget));
            }
            if (cuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "cuisine", cuisine));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (isOpen != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "is-open", isOpen));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "DefaultApi.SearchRestaurants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchRestaurants200Response>("/food/restaurants/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRestaurants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Restaurants Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="lat">The latitude of the user&#39;s location. (optional)</param>
        /// <param name="lng">The longitude of the user&#39;s location.\&quot;. (optional)</param>
        /// <param name="distance">The distance around the location in miles. (optional)</param>
        /// <param name="budget">The user&#39;s budget for a meal in USD. (optional)</param>
        /// <param name="cuisine">The cuisine of the restaurant. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurant between 0 and 5. (optional)</param>
        /// <param name="isOpen">Whether the restaurant must be open at the time of search. (optional)</param>
        /// <param name="sort">How to sort the results, one of the following &#39;cheapest&#39;, &#39;fastest&#39;, &#39;rating&#39;, &#39;distance&#39; or the default &#39;relevance&#39;. (optional)</param>
        /// <param name="page">The page number of results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchRestaurants200Response</returns>
        public async System.Threading.Tasks.Task<SearchRestaurants200Response> SearchRestaurantsAsync(string? query = default(string?), decimal? lat = default(decimal?), decimal? lng = default(decimal?), decimal? distance = default(decimal?), decimal? budget = default(decimal?), string? cuisine = default(string?), decimal? minRating = default(decimal?), bool? isOpen = default(bool?), string? sort = default(string?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<SearchRestaurants200Response> localVarResponse = await SearchRestaurantsWithHttpInfoAsync(query, lat, lng, distance, budget, cuisine, minRating, isOpen, sort, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Restaurants Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="lat">The latitude of the user&#39;s location. (optional)</param>
        /// <param name="lng">The longitude of the user&#39;s location.\&quot;. (optional)</param>
        /// <param name="distance">The distance around the location in miles. (optional)</param>
        /// <param name="budget">The user&#39;s budget for a meal in USD. (optional)</param>
        /// <param name="cuisine">The cuisine of the restaurant. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurant between 0 and 5. (optional)</param>
        /// <param name="isOpen">Whether the restaurant must be open at the time of search. (optional)</param>
        /// <param name="sort">How to sort the results, one of the following &#39;cheapest&#39;, &#39;fastest&#39;, &#39;rating&#39;, &#39;distance&#39; or the default &#39;relevance&#39;. (optional)</param>
        /// <param name="page">The page number of results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchRestaurants200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<SearchRestaurants200Response>> SearchRestaurantsWithHttpInfoAsync(string? query = default(string?), decimal? lat = default(decimal?), decimal? lng = default(decimal?), decimal? distance = default(decimal?), decimal? budget = default(decimal?), string? cuisine = default(string?), decimal? minRating = default(decimal?), bool? isOpen = default(bool?), string? sort = default(string?), decimal? page = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (lat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            }
            if (lng != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "lng", lng));
            }
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (budget != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "budget", budget));
            }
            if (cuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "cuisine", cuisine));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (isOpen != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "is-open", isOpen));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "DefaultApi.SearchRestaurants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchRestaurants200Response>("/food/restaurants/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRestaurants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }
    }
}